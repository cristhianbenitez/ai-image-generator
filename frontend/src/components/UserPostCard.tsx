import BookmarkIcon from '@assets/icons/bookmark.svg';
import { collectionService } from '@services';
import type { RootState } from '@store';
import { useAppSelector } from '@store/hooks';
import { useCallback, useState } from 'react';

interface UserPostCardProps {
  id: number;
  name: string;
  image: string;
  avatar: string;
  isBookmarked: boolean;
  onBookmarkChange?: () => void;
  onRemove?: () => void;
  variant?: 'feed' | 'collection';
  className?: string;
}

export const UserPostCard = ({
  id,
  name,
  image,
  avatar,
  isBookmarked: initialIsBookmarked,
  onBookmarkChange,
  onRemove,
  variant = 'feed',
  className = '',
}: UserPostCardProps) => {
  const [imageLoaded, setImageLoaded] = useState(false);
  const [isBookmarked, setIsBookmarked] = useState(initialIsBookmarked);
  const [isLoading, setIsLoading] = useState(false);

  const user = useAppSelector((state: RootState) => state.auth.user);

  const handleBookmark = useCallback(async () => {
    if (!user || isLoading) return;

    setIsLoading(true);
    try {
      const userId = parseInt(user.id);

      if (variant === 'collection' && isBookmarked && onRemove) {
        await collectionService.removeFromCollection(userId, id);
        onRemove();
      } else {
        if (isBookmarked) {
          await collectionService.removeFromCollection(userId, id);
          setIsBookmarked(false);
        } else {
          await collectionService.saveToCollection(userId, id);
          setIsBookmarked(true);
        }
        onBookmarkChange?.();
      }
    } catch (error) {
      console.error('Failed to handle bookmark:', error);
    } finally {
      setIsLoading(false);
    }
  }, [user, isLoading, variant, isBookmarked, id, onRemove, onBookmarkChange]);

  const ImagePlaceholder = () => (
    <div className="w-[248px] aspect-square bg-darkAlt2 animate-pulse rounded-lg" />
  );

  const BookmarkButton = () => (
    <button
      onClick={handleBookmark}
      disabled={isLoading || !user}
      className={`w-7 h-7 flex items-center justify-center rounded-lg transition-colors duration-200 ease-in-out
        ${isBookmarked ? 'bg-purple' : 'bg-darkAlt hover:bg-darkAlt2'}
        ${!user ? 'opacity-50 cursor-not-allowed' : ''}
        ${isLoading ? 'animate-pulse' : ''}`}
      title={user ? 'Bookmark image' : 'Login to bookmark'}
    >
      <img src={BookmarkIcon} alt="Bookmark icon" />
    </button>
  );

  return (
    <article className={`w-full max-w-[248px] break-inside-avoid ${className}`}>
      <header className="w-full rounded-lg overflow-hidden p-1 bg-darkAlt ">
        {!imageLoaded && <ImagePlaceholder />}
        <img
          src={image}
          alt={`Generated by ${name}`}
          className={`w-full h-auto rounded-lg ${!imageLoaded ? 'hidden' : ''}`}
          onLoad={() => setImageLoaded(true)}
          loading="lazy"
        />
      </header>
      <div className="w-full flex justify-between items-center mt-2">
        <div className="flex items-center gap-2">
          <img
            src={avatar}
            alt={`${name}'s avatar`}
            className="w-6 h-6 object-cover rounded-full"
            loading="lazy"
          />
          <p className="text-label font-normal">{name}</p>
        </div>
        <BookmarkButton />
      </div>
    </article>
  );
};
